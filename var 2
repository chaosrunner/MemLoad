using System;
using System.Collections.Generic;
using System.ServiceProcess;
using System.Timers;
using System.Diagnostics;
using System.Runtime.InteropServices;

namespace DllMonitorService
{
    public partial class DllMonitor : ServiceBase
    {
        private Timer timer;

        public DllMonitor()
        {
            InitializeComponent();
            this.CanStop = true;
            this.CanPauseAndContinue = true;
            this.AutoLog = true;
        }

        protected override void OnStart(string[] args)
        {
            timer = new Timer();
            timer.Interval = 5000;
            timer.Elapsed += new ElapsedEventHandler(OnTimer);
            timer.Start();
        }

        protected override void OnStop()
        {
            timer.Stop();
            timer.Dispose();
        }

        private void OnTimer(object sender, ElapsedEventArgs args)
        {
            Process[] processes = Process.GetProcesses();
            string[] dllNames = new string[] { "kernel32.dll", "user32.dll", "gdi32.dll" }; // example list of DLLs
            List<string> matchedDlls = new List<string>();

            foreach (Process process in processes)
            {
                foreach (ProcessModule module in process.Modules)
                {
                    if (Array.Exists(dllNames, element => element.Equals(module.ModuleName, StringComparison.OrdinalIgnoreCase)))
                    {
                        if (!process.ProcessName.Equals("ProcessToIgnore", StringComparison.OrdinalIgnoreCase))
                        {
                            matchedDlls.Add(module.FileName);
                        }
                    }
                }
            }

            foreach (string matchedDll in matchedDlls)
            {
                ProcessStartInfo startInfo = new ProcessStartInfo();
                startInfo.FileName = GetProcessName(matchedDll) + ".exe";
                startInfo.Arguments = "-dll " + matchedDll;
                Process.Start(startInfo);
            }
        }

        private string GetProcessName(string dllPath)
        {
            string processName = null;
            try
            {
                IntPtr hModule = LoadLibraryEx(dllPath, IntPtr.Zero, LOAD_LIBRARY_AS_DATAFILE);
                if (hModule != IntPtr.Zero)
                {
                    StringBuilder sb = new StringBuilder(1024);
                    if (GetModuleFileName(hModule, sb, sb.Capacity) != 0)
                    {
                        processName = System.IO.Path.GetFileNameWithoutExtension(sb.ToString());
                    }
                    FreeLibrary(hModule);
                }
            }
            catch { }
            return processName;
        }

        // Windows API declarations
        private const uint LOAD_LIBRARY_AS_DATAFILE = 0x00000002;
        [DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern IntPtr LoadLibraryEx(string lpFileName, IntPtr hFile, uint dwFlags);
        [DllImport("kernel32.dll", CharSet = CharSet.Unicode, SetLastError = true)]
        private static extern uint GetModuleFileName(IntPtr hModule, StringBuilder lpFilename, int nSize);
        [DllImport("kernel32.dll", SetLastError = true)]
        [return: MarshalAs(UnmanagedType.Bool)]
        private static extern bool FreeLibrary(IntPtr hModule);
    }
}
